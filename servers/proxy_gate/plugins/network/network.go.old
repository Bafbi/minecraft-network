package network

import (
	"context"
	"encoding/json"
	"fmt"
	"math/rand"
	"net"
	"strings"
	"sync"

	"github.com/go-logr/logr"
	"github.com/nats-io/nats.go"
	"github.com/robinbraemer/event"
	"go.minekube.com/brigodier"
	"go.minekube.com/common/minecraft/color"
	c "go.minekube.com/common/minecraft/component"
	"go.minekube.com/gate/pkg/command"
	"go.minekube.com/gate/pkg/edition/java/proxy"
)

var (
	lobbiesMu sync.RWMutex
	lobbies   = make(map[string]proxy.RegisteredServer)
	natsKV    nats.KeyValue // Global KV store reference
)

// PlayerLocation stores player server information
type PlayerLocation struct {
	ServerName string `json:"server_name"`
	ServerAddr string `json:"server_addr"`
}

var Plugin = proxy.Plugin{
	Name: "Network",
	Init: func(ctx context.Context, p *proxy.Proxy) error {
		log := logr.FromContextOrDiscard(ctx)
		log.Info("Network plugin starting")

		natsURL := "nats://network-nats:4222"
		nc, err := nats.Connect(natsURL)
		if err != nil {
			return fmt.Errorf("failed to connect to NATS: %w", err)
		}

		js, err := nc.JetStream()
		if err != nil {
			return fmt.Errorf("failed to get JetStream context: %w", err)
		}

		// Initialize lobbies KV
		kv, err := js.KeyValue("lobbies")
		if err != nil {
			kv, err = js.CreateKeyValue(&nats.KeyValueConfig{
				Bucket: "lobbies",
			})
			if err != nil {
				return fmt.Errorf("failed to create lobbies KV store: %w", err)
			}
		}

		// Initialize players KV
		playersKV, err := js.KeyValue("players")
		if err != nil {
			playersKV, err = js.CreateKeyValue(&nats.KeyValueConfig{
				Bucket: "players",
			})
			if err != nil {
				return fmt.Errorf("failed to create players KV store: %w", err)
			}
		}
		natsKV = playersKV

		// Watch for lobby updates
		go func() {
			watcher, err := kv.WatchAll()
			if err != nil {
				log.Error(err, "Unable to start KV watch")
				return
			}
			defer watcher.Stop()

			for entry := range watcher.Updates() {
				if entry == nil {
					continue
				}
				if entry.Operation() == nats.KeyValueDelete {
					handleLobbyUnregistration(entry.Key(), p, log)
				} else {
					handleLobbyRegistration(entry.Key(), entry.Value(), p, log)
				}
			}
		}()

		// Player routing events
		event.Subscribe(p.Event(), 0, sendPlayerToLobby(p, log))
		event.Subscribe(p.Event(), 0, addServerToTabList(p, log))
		event.Subscribe(p.Event(), 0, handleKickedFromServerEvent(p, log))

		// Player tracking events
		event.Subscribe(p.Event(), 0, trackPlayerServer(log))
		event.Subscribe(p.Event(), 0, trackPlayerDisconnect(log))

		// Register the join command
		p.Command().Register(registerJoinCommand(p, log))

		log.Info("Network plugin initialized")
		return nil
	},
}

// Track player server connections
func trackPlayerServer(log logr.Logger) func(e *proxy.ServerConnectedEvent) {
	return func(e *proxy.ServerConnectedEvent) {
		player := e.Player()
		server := e.Server()
		serverInfo := server.ServerInfo()

		location := PlayerLocation{
			ServerName: serverInfo.Name(),
			ServerAddr: serverInfo.Addr().String(),
		}

		data, err := json.Marshal(location)
		if err != nil {
			log.Error(err, "Failed to marshal player location", "player", player.Username())
			return
		}

		// Store player location
		key := "player/" + strings.ToLower(player.Username())
		_, err = natsKV.Put(key, data)
		if err != nil {
			log.Error(err, "Failed to store player location", "player", player.Username())
			return
		}

		log.Info("Tracked player location", "player", player.Username(), "server", serverInfo.Name())
	}
}

// Track player disconnects to remove from KV
func trackPlayerDisconnect(log logr.Logger) func(e *proxy.DisconnectEvent) {
	return func(e *proxy.DisconnectEvent) {
		player := e.Player()
		key := "player/" + strings.ToLower(player.Username())

		err := natsKV.Delete(key)
		if err != nil && err != nats.ErrKeyNotFound {
			log.Error(err, "Failed to remove player location", "player", player.Username())
			return
		}

		log.Info("Removed player tracking", "player", player.Username())
	}
}

// Join command implementation
func registerJoinCommand(p *proxy.Proxy, log logr.Logger) brigodier.LiteralNodeBuilder {
	executeJoin := command.Command(func(ctx *command.Context) error {
		sender, ok := ctx.Source.(proxy.Player)
		if !ok {
			return ctx.Source.SendMessage(&c.Text{
				Content: "Only players can use this command",
				S:       c.Style{Color: color.Red},
			})
		}

		targetName := ctx.String("player")
		key := "player/" + strings.ToLower(targetName)

		// Get player location from KV store
		entry, err := natsKV.Get(key)
		if err != nil {
			if err == nats.ErrKeyNotFound {
				return sender.SendMessage(&c.Text{
					Content: "Player not found or not online",
					S:       c.Style{Color: color.Red},
				})
			}
			log.Error(err, "Failed to get player location", "target", targetName)
			return sender.SendMessage(&c.Text{
				Content: "Failed to find player location",
				S:       c.Style{Color: color.Red},
			})
		}

		var location PlayerLocation
		err = json.Unmarshal(entry.Value(), &location)
		if err != nil {
			log.Error(err, "Failed to unmarshal player location", "target", targetName)
			return sender.SendMessage(&c.Text{
				Content: "Error processing player location",
				S:       c.Style{Color: color.Red},
			})
		}

		// Connect to the server
		serverAddr, err := net.ResolveTCPAddr("tcp", location.ServerAddr)
		if err != nil {
			log.Error(err, "Failed to resolve server address", "addr", location.ServerAddr)
			return sender.SendMessage(&c.Text{
				Content: "Cannot resolve server address",
				S:       c.Style{Color: color.Red},
			})
		}

		// First check if the server is already registered locally
		var targetServer proxy.RegisteredServer
		for _, server := range p.Servers() {
			if server.ServerInfo().Name() == location.ServerName {
				targetServer = server
				break // Found the server, no need to continue
			}
		}

		// If not found, register it temporarily
		if targetServer == nil {
			serverInfo := proxy.NewServerInfo(location.ServerName, serverAddr)
			targetServer, err = p.Register(serverInfo)
			if err != nil {
				log.Error(err, "Failed to register server", "server", location.ServerName)
				return sender.SendMessage(&c.Text{
					Content: "Failed to register target server",
					S:       c.Style{Color: color.Red},
				})
			}
			// Clean up after connection attempt (to avoid stale registrations)
			defer p.Unregister(serverInfo)
		}

		// Notify the user
		sender.SendMessage(&c.Text{
			Content: fmt.Sprintf("Connecting you to %s's server (%s)...", targetName, location.ServerName),
			S:       c.Style{Color: color.Green},
		})

		// Connect to the server
		_, err = sender.CreateConnectionRequest(targetServer).Connect(ctx)
		if err != nil {
			log.Error(err, "Failed to connect player", "player", sender.Username(), "target", targetName)
			return sender.SendMessage(&c.Text{
				Content: "Failed to connect to server",
				S:       c.Style{Color: color.Red},
			})
		}

		return nil
	})

	return brigodier.Literal("join").
		Then(brigodier.Argument("player", brigodier.StringWord).
			Executes(executeJoin))
}

func handleLobbyRegistration(name string, value []byte, p *proxy.Proxy, log logr.Logger) {
	addr := string(value)
	if addr == "" {
		log.Info("Lobby address is empty", "name", name)
		return
	}
	serverAddr, err := net.ResolveTCPAddr("tcp", addr)
	if err != nil {
		log.Error(err, "Failed to resolve server address", "name", name, "addr", addr)
		return
	}
	serverInfo := proxy.NewServerInfo(name, serverAddr)

	registeredServer, err := p.Register(serverInfo)
	if err != nil {
		log.Error(err, "Failed to register server", "name", name)
		return
	}

	lobbiesMu.Lock()
	lobbies[name] = registeredServer
	lobbiesMu.Unlock()

	log.Info("Lobby registered", "name", name)
}

func handleLobbyUnregistration(name string, p *proxy.Proxy, log logr.Logger) {
	lobbiesMu.Lock()
	defer lobbiesMu.Unlock()

	if _, ok := lobbies[name]; !ok {
		log.Info("Lobby not found", "name", name)
		return
	}

	serverInfo := lobbies[name].ServerInfo()
	p.Unregister(serverInfo)

	delete(lobbies, name)
	log.Info("Lobby unregistered", "name", name)
}

func sendPlayerToLobby(p *proxy.Proxy, log logr.Logger) func(*proxy.PlayerChooseInitialServerEvent) {
	return func(e *proxy.PlayerChooseInitialServerEvent) {
		lobbiesMu.RLock()
		defer lobbiesMu.RUnlock()

		if len(lobbies) == 0 {
			log.Info("No lobbies available")
			return
		}

		var chosen proxy.RegisteredServer
		i := 0
		n := rand.Intn(len(lobbies))
		for _, lobby := range lobbies {
			if i == n {
				chosen = lobby
				break
			}
			i++
		}

		if chosen != nil {
			e.SetInitialServer(chosen)
			log.Info("Routed player to lobby", "player", e.Player().Username(), "server", chosen.ServerInfo().Name())
		}
	}
}

func addServerToTabList(p *proxy.Proxy, log logr.Logger) func(e *proxy.ServerPostConnectEvent) {
	return func(e *proxy.ServerPostConnectEvent) {
		serverName := e.Player().CurrentServer().Server().ServerInfo().Name()
		header := &c.Text{
			Content: fmt.Sprintf("\nWelcome %s on my network!\n", e.Player().Username()),
			S:       c.Style{Color: color.Yellow, Bold: c.True},
		}
		footer := &c.Text{
			Content: fmt.Sprintf("\n# %s\n", serverName),
			S:       c.Style{Color: color.White, Italic: c.True},
		}

		err := e.Player().TabList().SetHeaderFooter(header, footer)
		if err != nil {
			log.Error(err, "Failed to set tab list header and footer", "player", e.Player().Username())
		} else {
			log.Info("Set tab list header and footer", "player", e.Player().Username(), "server", serverName)
		}
	}
}

func handleKickedFromServerEvent(p *proxy.Proxy, log logr.Logger) func(e *proxy.KickedFromServerEvent) {
	return func(e *proxy.KickedFromServerEvent) {
		if e.OriginalReason() != nil && isServerShutdownReason(e.OriginalReason()) {
			targetServer := findTargetServer(e.Player())
			if targetServer != nil {
				e.SetResult(&proxy.RedirectPlayerKickResult{
					Server:  targetServer,
					Message: &c.Text{Content: "You have been redirected to another server."},
				})
				log.Info("Redirected player to another server", "player", e.Player().Username(), "server", targetServer.ServerInfo().Name())
			} else {
				e.SetResult(&proxy.DisconnectPlayerKickResult{
					Reason: &c.Text{Content: "No available server to redirect to."},
				})
				log.Info("No available server to redirect player", "player", e.Player().Username())
			}
		}
	}
}

func isServerShutdownReason(reason c.Component) bool {
	// Check common shutdown messages
	if text, ok := reason.(*c.Text); ok {
		content := strings.ToLower(text.Content)
		shutdownPhrases := []string{"server closed", "shutting down", "restart", "maintenance"}
		for _, phrase := range shutdownPhrases {
			if strings.Contains(content, phrase) {
				return true
			}
		}
	}
	return false
}

func findTargetServer(player proxy.Player) proxy.RegisteredServer {
	lobbiesMu.RLock()
	defer lobbiesMu.RUnlock()

	if len(lobbies) == 0 {
		return nil
	}

	var chosen proxy.RegisteredServer
	i := 0
	n := rand.Intn(len(lobbies))
	for _, lobby := range lobbies {
		if i == n {
			chosen = lobby
			break
		}
		i++
	}

	return chosen
}
